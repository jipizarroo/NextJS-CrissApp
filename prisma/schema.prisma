generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ROLE_TYPES {
  ADMIN
  USER
}

model User {
  id           Int            @id @default(autoincrement())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  password     String
  email        String         @unique
  name         String
  age          String?
  role         ROLE_TYPES     @default(USER)
  foods        Foods[]
  races        Races[]
  UserStrategy UserStrategy[]
}

model Foods {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  brand     String?
  unit      String?
  grams     Float
  calories  Float
  carbs     Float
  cafeine   Float
  userId    Int?
  User      User?    @relation(fields: [userId], references: [id])
}

model PublicFoods {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  brand     String?
  unit      String
  grams     Float
  calories  Float
  carbs     Float
  cafeine   Float
}

model Races {
  id              Int            @id @default(autoincrement())
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  name            String
  stages          Json
  belongsToUserId Int
  belongsToUser   User           @relation(fields: [belongsToUserId], references: [id])
  isUserAdmin     Boolean        @default(false)
  UserStrategy    UserStrategy[]
}

model UserStrategy {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  foodGroup       Json
  belongsToUserId Int
  belongsToUser   User     @relation(fields: [belongsToUserId], references: [id])
  belongsToRace   Races    @relation(fields: [belongsToRaceId], references: [id])
  belongsToRaceId Int
}
